# -*- coding: utf-8 -*-
"""Detection of covid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxWwW49fqlYdIgM6f_Kq1nhoVhKhtDZP
"""

# connect google drive to my colab
from google.colab import drive
drive.mount('/content/drive')

# import all libraries
import numpy as np
import keras
from keras.layers import Dense, Conv2D,MaxPool2D,Dropout,Flatten
from keras.models import Sequential 
from keras.preprocessing import image

# import data set 
# by data generator we can do image augmentations: multiple dimension for our model to learn 
train_datagen= image.ImageDataGenerator(
    rescale=1/255,horizontal_flip=True , zoom_range=0.2, shear_range=0.2)
# calling data set for training
train_data=train_datagen.flow_from_directory(directory="/content/drive/MyDrive/COVID-19_Radiography_Dataset/Train",
                                             target_size=(256,256), batch_size=16, class_mode="binary")

# to show to classes : based on folder name 
train_data.class_indices

# rescale the image 
test_datagen= image.ImageDataGenerator(rescale=1/255)
test_data=test_datagen.flow_from_directory(directory="/content/drive/MyDrive/COVID-19_Radiography_Dataset/Val",
                                             target_size=(256,256), batch_size=16, class_mode="binary")

# cnn model
model=Sequential()
# low level feature, relu for non linerality; 3 rgb
model.add(Conv2D(filters=32,kernel_size=(3,3),activation="relu",input_shape=(256,256,3)))
# increse filter
model.add(Conv2D(filters=64,kernel_size=(3,3),activation="relu"))
model.add(MaxPool2D())
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=128,kernel_size=(3,3),activation="relu"))
model.add(MaxPool2D())
model.add(Dropout(rate=0.25))

# flatten the layer image get flaten
# dense is multilayer perceptron

model.add(Flatten())
model.add(Dense(units= 64, activation="relu"))
# dropout to avoid overfitting
model.add(Dropout(rate=0.5))   
model.add(Dense(units=1, activation="sigmoid"))  # sigmoid softmax
model.compile(loss=keras.losses.binary_crossentropy,optimizer="adam",metrics=['acc'])   #  rmsprop adam

model.summary()

"""train model"""

model.fit(train_data,steps_per_epoch=20, epochs=50 ,validation_steps=2, validation_data=test_data)

path="/content/drive/MyDrive/COVID-19_Radiography_Dataset/Val/Normal/Normal-6999.png"
img=image.load_img(path,target_size=(256,256))
# conert image to number
img=image.img_to_array(img)/255
# 1D Array
img=np.array([img])

img.shape

# model.predict_classes(img)
(model.predict(img) > 0.5).astype("int32")

path="/content/drive/MyDrive/COVID-19_Radiography_Dataset/Val/Covid/COVID-2619.png"
img=image.load_img(path,target_size=(256,256))
img=image.img_to_array(img)/255

img=np.array([img])

img.shape
(model.predict(img) > 0.5).astype("int32")